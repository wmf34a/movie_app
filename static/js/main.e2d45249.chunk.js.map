{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","_ref2","genre","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","data","json","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAyDA,SAASA,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACpB,OACCC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,EAAhC,KAIF,SAASK,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC7B,OACCP,EAAAC,EAAAC,cAAA,OAAKM,IAAMF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKJ,UAAU,kBAiBtCO,MAjDf,SAAAC,GAAiD,IAAjCF,EAAiCE,EAAjCF,MAAOH,EAA0BK,EAA1BL,OAAQM,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACtC,OACCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAACE,EAAD,CAAaE,OAAQA,EAAQC,IAAKE,KAEnCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,UAAKO,GACNT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbS,EAAOE,IAAI,SAACf,EAAOgB,GAAR,OAAkBf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAE9Df,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACCiB,KAAML,EACNM,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBCEGC,6MA1CdC,MAAQ,KAMRC,cAAgB,WAWf,OAVeC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,GAEtC,OADCC,QAAQC,IAAIF,GACN5B,EAAAC,EAAAC,cAAC6B,EAAD,CACNtB,MAAOmB,EAAMI,cACb1B,OAAQsB,EAAMK,mBACdjB,IAAKY,EAAMM,GACXtB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAKjBsB,gCAAa,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQf,EAAKgB,WADb,OACPf,EADOY,EAAAI,KAEbjB,EAAKkB,SAAS,CACbjB,WAHY,wBAAAY,EAAAM,SAAAT,QAMdM,SAAW,WACV,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAE,GAAI,OAAIA,EAAKD,KAAKrB,SACvBuB,MAAM,SAAAC,GAAG,OAAItB,QAAQC,IAAIqB,yFA1BzBC,KAAKjB,8CA6BC,IACCR,EAAWyB,KAAK5B,MAAhBG,OACP,OACD3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWwB,EAAS,MAAQ,gBAChCA,EAASyB,KAAK3B,gBAAkB,qBAxCjB4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.e2d45249.chunk.js","sourcesContent":["//import React, { Component } from 'react';  -> 함수형 컴포넌트라 {component} 필요없음\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css';\n\n//class Movie extends Component {\n//\tstatic propTypes = {\n//\t\ttitle: PropTypes.string.isRequired,//부모 컴포넌트에서 얻는 정보의 종류가 무엇인지 알수 있음\n//\t\tposter: PropTypes.string.isRequired // isRequired-> 필수요건인지 확인\n//\t}\n//\trender(){\n//\t return(\n//\t\t<div className=\"Movie\">\n//\t\t\t<div className=\"MoviePoster\">\n//\t\t\t<MoviePoster poster={this.props.poster}/>\n//\t\t\t</div>\n//\t\t\t<h1>{this.props.title}</h1>\n//\t\t</div>\n//\t );\n//\t}\n//}\n\n//class MoviePoster extends Component {\n//\tstatic propTypes = {\n//\t\tposter: PropTypes.string.isRequired\n//\t}\n//\trender(){\n//\t\treturn(\n//\t\t\t<img src= {this.props.poster} alt=\"Movie Poster\"/>\t\n//\t\t)\n//\t}\n//}\nfunction Movie({title, poster, genres, synopsis}){\n\treturn(\n\t\t<div className=\"Movie\">\n\t\t\t<div className=\"Movie__Column\">\n\t\t\t\t<MoviePoster poster={poster} alt={title}/>\n\t\t\t</div>\n\t\t\t<div className=\"Movie__Column\">\n\t\t\t\t<h1>{title}</h1>\n\t\t\t<div className=\"Movie__Genres\">\n\t\t\t\t{genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\n\t\t\t</div>\n\t\t\t<div className=\"Movie_Synopsis\">\n\t\t\t<LinesEllipsis\n\t\t\t\ttext={synopsis}\n\t\t\t\tmaxLine='3'\n\t\t\t\tellipsis=' ...'\n\t\t\t\ttrimRight\n\t\t\t\tbasedOn='letters'\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t)\n}\nfunction MovieGenre({genre}){\n\treturn(\n\t\t<span className=\"Movie__Genre\">{genre} </span>  \n\t)\n}\n\nfunction MoviePoster({poster, alt}){// 위 클래스형 컴포넌트와 같다\n\treturn(\n\t\t<img src= {poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\t\n\t)\n}\nMovie.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\tposter: PropTypes.string.isRequired,\n\tgenres: PropTypes.string.isRequired,\n\tsynopsis: PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes = {\n\tposter: PropTypes.string.isRequired,\n\talt: PropTypes.string.isRequired\n}\nMovieGenre.propTypes = {\n\tgenre: PropTypes.string.isRequired\n}\nexport default Movie;\n","//import React from 'react';\nimport React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie'; \n\n\nclass App extends Component {\n\t//Render: componentWillMount() => render() => componentDidMount()\n\t//Update: componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate\n\t//-> render() -> component\n\tstate = {}\t\n\n\tcomponentDidMount(){\n\t\t\tthis._getMovies();\n\t}\n\t\n\t_renderMovies = () => {\n\t\tconst movies = this.state.movies.map((movie) => {\n\t\t\tconsole.log(movie)\n\t\treturn <Movie \n\t\t\ttitle={movie.title_english} \n\t\t\tposter={movie.medium_cover_image} \n\t\t\tkey={movie.id} \n\t\t\tgenres={movie.genres}\n\t\t\tsynopsis={movie.synopsis}\n\t\t\t/>\n\t\t})\n\t\treturn movies\n\t}\n\t _getMovies = async () => {\n\t\tconst movies = await this._callApi()\n\t\tthis.setState({\n\t\t\tmovies\n\t\t})\n\t}\n\t_callApi = () => {\n\t\treturn fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n\t\t.then(data => data.json())\n\t\t.then(json => json.data.movies)\n\t\t.catch(err => console.log(err))\n\t}\n//로딩스테이트 만드는법\n\trender(){\n\t\tconst { movies } = this.state;\n\t  return (\n\t\t<div className={movies ? \"App\" : \"App--loading\"}>\n\t\t{movies ? this._renderMovies() : 'Loading...'}\n\t\t</div>\n\t  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}